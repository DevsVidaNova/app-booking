#!/bin/bash

# Script de verifica√ß√£o pr√©-deploy
# Execute este script para verificar se tudo est√° configurado corretamente

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[‚ö†]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

print_header() {
    echo -e "\n${BLUE}=== $1 ===${NC}"
}

# Contadores
ERRORS=0
WARNINGS=0

# Fun√ß√£o para incrementar erros
add_error() {
    print_error "$1"
    ((ERRORS++))
}

# Fun√ß√£o para incrementar warnings
add_warning() {
    print_warning "$1"
    ((WARNINGS++))
}

echo "üîç Verificando configura√ß√£o de deploy..."
echo ""

# 1. Verificar estrutura do projeto
print_header "Estrutura do Projeto"

if [ -f "package.json" ]; then
    print_success "package.json encontrado na raiz"
else
    add_error "package.json n√£o encontrado na raiz"
fi

if [ -d "back" ] && [ -f "back/package.json" ]; then
    print_success "Backend encontrado (back/)"
else
    add_error "Diret√≥rio backend (back/) n√£o encontrado ou sem package.json"
fi

if [ -d "front" ] && [ -f "front/package.json" ]; then
    print_success "Frontend encontrado (front/)"
else
    add_error "Diret√≥rio frontend (front/) n√£o encontrado ou sem package.json"
fi

# 2. Verificar Dockerfiles
print_header "Dockerfiles"

if [ -f "back/Dockerfile" ]; then
    print_success "Dockerfile do backend encontrado"
else
    add_error "back/Dockerfile n√£o encontrado"
fi

if [ -f "front/Dockerfile" ]; then
    print_success "Dockerfile do frontend encontrado"
else
    add_error "front/Dockerfile n√£o encontrado"
fi

# 3. Verificar configura√ß√£o do Next.js
print_header "Configura√ß√£o Next.js"

if [ -f "front/next.config.mjs" ]; then
    if grep -q "output: 'standalone'" "front/next.config.mjs"; then
        print_success "Next.js configurado para output standalone"
    else
        add_error "Next.js n√£o est√° configurado para output standalone"
    fi
else
    add_warning "next.config.mjs n√£o encontrado"
fi

# 4. Verificar GitHub Actions
print_header "GitHub Actions"

if [ -f ".github/workflows/deploy.yml" ]; then
    print_success "Workflow de deploy encontrado"
    
    # Verificar se o caminho est√° correto
    if grep -q "/opt/app-booking" ".github/workflows/deploy.yml"; then
        print_success "Caminho de deploy configurado corretamente"
    else
        add_warning "Verifique se o caminho de deploy est√° correto no workflow"
    fi
else
    add_error "Workflow de deploy (.github/workflows/deploy.yml) n√£o encontrado"
fi

# 5. Verificar docker-compose
print_header "Docker Compose"

if [ -f "docker-compose.prod.yml" ]; then
    print_success "docker-compose.prod.yml encontrado"
else
    add_warning "docker-compose.prod.yml n√£o encontrado (ser√° criado pelo script de setup)"
fi

if [ -f "nginx.conf" ]; then
    print_success "nginx.conf encontrado"
else
    add_warning "nginx.conf n√£o encontrado (ser√° criado pelo script de setup)"
fi

# 6. Verificar scripts de setup
print_header "Scripts de Setup"

if [ -f "setup-vps.sh" ]; then
    print_success "Script de setup da VPS encontrado"
    if [ -x "setup-vps.sh" ]; then
        print_success "Script de setup √© execut√°vel"
    else
        add_warning "Script de setup n√£o √© execut√°vel (execute: chmod +x setup-vps.sh)"
    fi
else
    add_error "setup-vps.sh n√£o encontrado"
fi

# 7. Verificar documenta√ß√£o
print_header "Documenta√ß√£o"

if [ -f "VPS_SETUP_GUIDE.md" ]; then
    print_success "Guia de setup da VPS encontrado"
else
    add_warning "VPS_SETUP_GUIDE.md n√£o encontrado"
fi

if [ -f "DEPLOY_README.md" ]; then
    print_success "README de deploy encontrado"
else
    add_warning "DEPLOY_README.md n√£o encontrado"
fi

if [ -f ".env.example" ]; then
    print_success "Arquivo de exemplo de vari√°veis encontrado"
else
    add_warning ".env.example n√£o encontrado"
fi

# 8. Verificar depend√™ncias do backend
print_header "Depend√™ncias Backend"

if [ -f "back/package.json" ]; then
    cd back
    
    # Verificar scripts necess√°rios
    if grep -q '"build"' package.json; then
        print_success "Script 'build' encontrado no backend"
    else
        add_error "Script 'build' n√£o encontrado no package.json do backend"
    fi
    
    if grep -q '"start"' package.json; then
        print_success "Script 'start' encontrado no backend"
    else
        add_error "Script 'start' n√£o encontrado no package.json do backend"
    fi
    
    if grep -q '"test"' package.json; then
        print_success "Script 'test' encontrado no backend"
    else
        add_warning "Script 'test' n√£o encontrado no package.json do backend"
    fi
    
    cd ..
fi

# 9. Verificar depend√™ncias do frontend
print_header "Depend√™ncias Frontend"

if [ -f "front/package.json" ]; then
    cd front
    
    # Verificar scripts necess√°rios
    if grep -q '"build"' package.json; then
        print_success "Script 'build' encontrado no frontend"
    else
        add_error "Script 'build' n√£o encontrado no package.json do frontend"
    fi
    
    if grep -q '"start"' package.json; then
        print_success "Script 'start' encontrado no frontend"
    else
        add_error "Script 'start' n√£o encontrado no package.json do frontend"
    fi
    
    # Verificar se Next.js est√° instalado
    if grep -q '"next"' package.json; then
        print_success "Next.js encontrado nas depend√™ncias"
    else
        add_error "Next.js n√£o encontrado nas depend√™ncias do frontend"
    fi
    
    cd ..
fi

# 10. Verificar Git
print_header "Configura√ß√£o Git"

if [ -d ".git" ]; then
    print_success "Reposit√≥rio Git inicializado"
    
    # Verificar se h√° commits
    if git log --oneline -1 &>/dev/null; then
        print_success "Reposit√≥rio tem commits"
    else
        add_warning "Reposit√≥rio n√£o tem commits ainda"
    fi
    
    # Verificar remote
    if git remote -v | grep -q "origin"; then
        print_success "Remote 'origin' configurado"
        REMOTE_URL=$(git remote get-url origin)
        if [[ $REMOTE_URL == *"github.com"* ]]; then
            print_success "Remote aponta para GitHub"
        else
            add_warning "Remote n√£o aponta para GitHub: $REMOTE_URL"
        fi
    else
        add_error "Remote 'origin' n√£o configurado"
    fi
else
    add_error "N√£o √© um reposit√≥rio Git"
fi

# 11. Verificar arquivos sens√≠veis
print_header "Seguran√ßa"

# Verificar se arquivos .env est√£o no .gitignore
if [ -f ".gitignore" ]; then
    if grep -q "\.env" .gitignore; then
        print_success "Arquivos .env est√£o no .gitignore"
    else
        add_warning "Adicione arquivos .env ao .gitignore"
    fi
else
    add_warning ".gitignore n√£o encontrado"
fi

# Verificar se n√£o h√° arquivos .env commitados
if git ls-files | grep -q "\.env$"; then
    add_error "Arquivos .env est√£o sendo versionados! Remova-os do Git"
else
    print_success "Nenhum arquivo .env est√° sendo versionado"
fi

# Resumo final
print_header "Resumo"

echo ""
if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    print_success "üéâ Tudo configurado corretamente! Pronto para deploy."
elif [ $ERRORS -eq 0 ]; then
    print_warning "‚ö†Ô∏è  Configura√ß√£o OK com $WARNINGS aviso(s). Revise os itens acima."
else
    print_error "‚ùå Encontrados $ERRORS erro(s) e $WARNINGS aviso(s). Corrija antes do deploy."
fi

echo ""
print_status "üìã Pr√≥ximos passos:"
echo "1. Corrija os erros encontrados (se houver)"
echo "2. Execute o script setup-vps.sh na sua VPS"
echo "3. Configure os GitHub Secrets"
echo "4. Fa√ßa push para a branch main para iniciar o deploy"
echo ""
print_status "üìö Consulte DEPLOY_README.md para instru√ß√µes detalhadas"

exit $ERRORS